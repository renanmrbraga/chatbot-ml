# utils/llm_utils.py
import json

from utils.metricas import METRICAS_VALIDAS

TEMPLATE = """
Voc√™ √© um analista de dados especialista em pol√≠ticas p√∫blicas municipais.

Sua miss√£o √© analisar os dados abaixo e responder √† pergunta do usu√°rio com **clareza, l√≥gica e profundidade interpretativa**.

‚ö†Ô∏è Instru√ß√µes obrigat√≥rias:
- N√ÉO invente dados ou conclus√µes.
- N√ÉO responda em formato de tabela.
- N√ÉO use frases gen√©ricas como "√© importante destacar...".

‚úÖ Sua resposta deve conter 3 blocos:
1. **Contexto geral**: Diga o que os dados mostram em linhas gerais.
2. **An√°lise comparativa (se houver mais de uma cidade)**: Destaque as principais diferen√ßas e n√∫meros relevantes.
3. **Conclus√£o objetiva**: Diga o que pode ser inferido com base apenas nos dados fornecidos.

---

üìå Pergunta do usu√°rio:
{pergunta}

üìä Dados dispon√≠veis:
{dados_formatados}

üìö Tema: {tema}
üìÅ Fontes: {fontes}

---

Responda como se estivesse apresentando para um gestor p√∫blico ou analista t√©cnico. Evite rodeios. Seja claro e direto.
"""

TEMPLATE_METRICA = f"""
Voc√™ √© um classificador de m√©tricas para dashboards comparativos entre cidades brasileiras.

Com base na pergunta do usu√°rio, identifique a melhor coluna da tabela `dados_municipios` para gerar o gr√°fico comparativo entre cidades.

‚ö†Ô∏è Importante:
- A infraestrutura escolar refere-se **apenas √†s escolas de Educa√ß√£o Infantil, Ensino Fundamental e M√©dio**.
- **N√£o inclui escolas t√©cnicas ou cursos t√©cnicos**.

Use apenas uma das seguintes colunas:
{json.dumps(METRICAS_VALIDAS, indent=2, ensure_ascii=False)}

Retorne apenas um JSON v√°lido no formato:
{{ "coluna": "matriculas_fundamental", "label": "Matr√≠culas - Ensino Fundamental" }}

Pergunta: "{{{{pergunta}}}}"
"""

TEMPLATE_TEMA = """
Voc√™ √© um classificador sem√¢ntico para um chatbot sobre pol√≠ticas p√∫blicas de cidades brasileiras.

Classifique a pergunta abaixo em **apenas um** dos seguintes temas:

- educacao
- populacao
- economia
- dashboard (se for uma pergunta que compara duas ou mais cidades)

‚ö†Ô∏è Se a pergunta for muito vaga ou n√£o pertencer a nenhum desses temas, **responda com "tema": "llm"**.

Retorne **apenas o JSON**, sem explica√ß√µes, neste formato:

{"tema": "educacao"}

Pergunta: "{pergunta}"
"""

def formatar_dados(dados: list[dict] | dict) -> str:
    """
    Converte os dados em um formato de tabela de texto leg√≠vel para o prompt.

    Aceita tanto uma lista de dicion√°rios (modo padr√£o) quanto um √∫nico dicion√°rio com chave 'context'.
    """
    if not dados:
        return "Nenhum dado dispon√≠vel."

    if isinstance(dados, dict) and "context" in dados:
        return dados["context"]

    if isinstance(dados, dict):
        dados = [dados]

    colunas = list(dados[0].keys())
    linhas = [colunas] + [[str(linha.get(col, "")) for col in colunas] for linha in dados]
    header = " | ".join(colunas)
    separador = " | ".join(["---"] * len(colunas))
    corpo = "\n".join([" | ".join(linha) for linha in linhas[1:]])

    return f"{header}\n{separador}\n{corpo}"
